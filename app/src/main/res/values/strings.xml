<resources>
    <string name="app_name">Teoretické Základy Informatiky</string>
    <string name="title_activity_teoria_menu">TeoriaMenu</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Formálne Jazyky</string>
    <string name="menu_gallery">Konečné Automaty</string>
    <string name="menu_slideshow">Zásobníkové Automaty</string>

    <string name="abeceda_vysvetlenie">Abecedou rozumieme neprázdnu konečnú množinu symbolov. Prvky abecedy nazývame písmená alebo tiež symboly abecedy. Symboly abecedy sú základné objekty, z ktorých budeme vytvárať zložitejšie štruktúry.
    </string>
    <string name="priklad_abeceda">1) ΣS = {a,á,ä,b,c,č,d,ď,e,é,f,g,h,ch,i,í,j,k,l,ĺ,ľ,m,n,ň, … } - slovenská abeceda\n2) ΣD = {0,1,2,3,4,5,6,7,8,9} - abeceda číslic v desiatkovej sústave\n3) B = {0,1} binárna abeceda\n4) R = {I,V, X, L,C,D,M} - abeceda rímskych číslic\n5) VS - slovník slovenského jazyka, obsahuje všetky slovenské slová (všimnite si, že slovenské slovo, napr. včera je v abecede VS v roli symbolu, písmena)\n6) Š = { ←,→,↖,↗,↑,↓,↔,↕,↙,↘ } - abeceda šípok\n7) D - abeceda dopravných značiek</string>
    <string name="slovo_retazec_vysvetlenie">Slovom (alebo reťazcom) nad danou abecedou rozumieme ľubovoľnú konečnú postupnosť písmen (symbolov abecedy). Postupnosť, ktorá neobsahuje žiadny symbol, teda prázdnu postupnosť, nazývame prázdnym slovom (prázdnym reťazcom). Prázdne slovo budeme označovať symbolom ε.</string>
    <string name="priklad_slovo_retazec">1) Tabuľa, projektor, bábätko, … slovenské slová vytvorené nad abecedou ∑S\n2) Každé písmeno abecedy je zároveň aj slovom\n3) Čísla v desiatkovej sústave sú slová nad abecedou ∑D = {0,1,2,3,4,5,6,7,8,9}. Napríklad čísla 125, 3406, 22444\n4) Binárne čísla sú slová nad abecedou {0,1}, napríklad binárne čísla 1010, 11\n5) Rímske čísla, napríklad IV, DVI sú príkladmi slov nad abecedou R= {I,V,X,L,C,D,M}\n6)Reťazec 😆😀😗🥰😚 je slovo nad abecedou S = { 😆,😀,😗,🥰,😚,😟,🤯,😰 }\n7) Reťazec: Včera výdatne pršalo. - je slovo nad abecedou VS, slovníkom slovenského jazyka (Tieto slová sme zvyknutí nazývať vetami, písať ich s veľkým začiatočným písmenom a ukončovať bodkou)</string>
    <string name="dlzka_slova_vysvetlenie">Dĺžka slova je nezáporné celé číslo, ktoré udáva počet symbolov (písmen) v slove. Dĺžku slova x značíme ako |x|. Teda ak x = a₁a₂... je slovo nad abecedou Σ a aⁱ∈Σ pre každé i, 1 ≤ i ≤ n , tak |x| = n. Prázdny reťazec má nulovú dĺžku, |ε| = 0. Slovo zložené z i výskytov rovnakého symbolu a budeme označovať aⁱ . Napríklad a³= aaa, b¹= b. Špeciálne pre i=0 a ľubovoľné písmeno c platí c⁰= ε. (Slovo zložené z nula výskytov písmena c je prázdne slovo.)</string>
    <string name="priklad_dlzka_slova">1) Slovo abbbccab nad abecedou {a, b, c} má dĺžku 8. Zapisujeme |abbbccab |= 8. \n2) Slovo ab³c²ab nad abecedou {a, b, c} má dĺžku 8, | ab³c²ab |= 8. \n3) Slovo DVI nad abecedou R= {I,V,X,L,C,D,M} má dĺžku 3, | DVI |=3. \n4) Slovo mama nad slovenskou abecedou ΣS má dĺžku 4, |mama|=4. \n5) Slovo mama nad abecedou VS, teda nad slovenským slovníkom, má dĺžku 1, |mama|=1. \n6) Je daná abeceda Σ= {a, b, c, d}. Slová nad abecedou Σ budú napríklad abbca, bda, b...</string>
    <string name="jazyk_vysvetlenie">Jazyk nad abecedou Σ je ľubovoľná množina slov nad touto abecedou. Množinu všetkých slov nad abecedou Σ nazývame univerzálny jazyk a označujeme ju Σ*. Do tohto jazyka patrí aj prázdne slovo. Ďalšími špeciálnymi jazykmi sú prázdny jazyk ∅, abeceda Σ a jazyk obsahujúci len prázdne slovo, ktorý zapíšeme {ε}. (Všimnite si rozdiel medzi jazykmi ∅ a {ε}).</string>
    <string name="priklad_jazyk">1) L = {aa, bb, cc} a L = {a, b, c} sú konečné jazyky nad abecedou Σ = {a, b, c} . \n2) Jazyk zátvoriek Lz = { (ⁱ )ⁱ : i >1} nad abecedou obsahujúcou len dva znaky: otváraciu zátvorku ( a zatváraciu zátvorku ). \n3) Jazyk Lb = { beginⁱ endⁱ : i >1} nad abecedou obsahujúcou symboly begin a end. \n4) Nech L = { ww: w je reťazec nad {0, 1} }. Do tohto jazyka patria slová zložené z dvoch rovnakých slov, napríklad 001001, 0000, ... \n5) Nech jazyk L = {a^p : |a| = p, p je prvočíslo} . Jazyk obsahuje všetky reťazce zo symbolov a prvočíselnej dĺžky. \n6) P je množina párnych čísel. Dekadický zápis párnych čísel nad abecedou  = {0,1,2,3,4,5,6,7,8,9} obsahuje všetky čísla ukončené číslicami 0, 2, 4, 6, 8. Je to jazyk, ktorý formálne zapíšeme takto: PΣ ={w0: w Σ*}∪{w2: w Σ*}∪{w4: w Σ*}∪{w6: wΣ *}∪{w8: w Σ*}. Všimnite si, že v prvej zátvorke sú reťazce číslic ukončené nulou, teda sú tam zapísané všetky čísla končiace na nulu a podobne je tomu v ďalších zátvorkách. Binárny zápis párnych čísel určuje jazyk P^B ={0}∪{1w0: w B*} nad abecedou B= {0,1}.</string>
    <string name="zjednotenie_vysvetlenie">Zjednotenie jazykov L₁ a L₂ je jazyk, ktorý obsahuje všetky slová, ktoré sa nachádzajú aspoň v jednom z jazykov L₁ a L₂. Matematický zápis zjednotenia je L₁ ∪ L₂. Vlastnosti zjednotenia sú komutatívnosť (L₁ ∪ L₂ = L₂ ∪ L₁) ako aj asociatívnosť((L₁ ∪ L₂)  L₃ = L₁ ∪ (L₂ ∪ L₃) = L₁ ∪ L₂ ∪ L₃).</string>
    <string name="priklad_zjednotenie">1) Nech P^B a Pⁿ sú jazyky reprezentujúce binárne zápisy párnych a nepárnych čísel P^B ={0} ∪ {1w0: w ∈ B*} nad abecedou B= {0,1} Pⁿ ={1} ∪ {1w1: w ∈ B*} nad abecedou B= {0,1}. Ich zjednotením je jazyk L= P^B ∪ Pⁿ = {1w: w ∈ B*} ∪ {0} reprezentujúci binárne zápisy všetkých prirodzených čísel. \n2) Jazyk L₁ = a*b, L₂ = b*a. Zjednotenie jazykov L₁ ∪ L₂ = a*b ∪ b*a. \n3) L₁ = {aw: w ∈ {a,b,c}*}, L₂ = {wa: w ∈ {a,b,c}*}. Zjednotenie bude L₁ ∪ L₂ = {aw: w ∈ {a,b,c}*} ∪ {wa: w ∈ {a,b,c}*}, obsahuje všetky slová začínajúce alebo končiace písmenom a. \n4) L₁ = {aa, b, abbb, abb} L₂ = {a+b, a++b, ba+a, aa, abbb} L₁ ∪ L₂ = { aa, b, abbb, abb, a+b, a++b, ba+a}</string>
    <string name="prienik_vysvetlenie">Prienik dvoch jazykov je jazyk, ktorý obsahuje iba tie slová, ktoré patria súčasne do každého z týchto jazykov. Matematický zápis prieniku je L₁ ∩ L₂.</string>
    <string name="priklad_prienik">1) Máme jazyky L₁ = {aa, b, abbb, abb} a L₂ = {a+b, a++b, ba+a, aa, abbb}. Prienik jazykov L₁ a L₂ bude jazyk L₁ ∩ L₂ = {aa, abbb} . \n2) Máme jazyky L₁ = {aw: w {a,b,c}*}, L₂ = {wa: w {a,b,c}*}. Ich prienik bude L₁∩ L₂ = {awa: w {a,b,c}*} ∪ {a}. Výsledkom operácie je jazyk, ktorý obsahuje slová začínajúce a končiace písmenom a.</string>
    <string name="doplnok_vysvetlenie">Doplnok jazyka L nad abecedou Σ je množina všetkých slov nad abecedou Σ, ktoré nie sú prvkami jazyka L. Doplnok jazyka označujeme L^c.</string>
    <string name="priklad_doplnok">1) Máme jazyk L = {a²ⁱ : i ≥ 0} nad abecedou Σ={a}. Doplnok jazyka L nad Σ={a} je jazyk L^c = {a²ⁱ+1: i ≥ 0}. Jazyk L obsahuje všetky slová párnej dĺžky a jeho doplnok. Jazyk L^r nad abecedou {a} obsahuje slová nepárnej dĺžky. \n2) Máme jazyk L = {a²ⁱ : i ≥ 0} nad abecedou Σ={a,b}. Jazyk L je rovnaký ako v predchádzajúcom príklade, ale teraz pracujeme s dvojpísmenovou abecedou {a,b}. Doplnok jazyka L v tomto prípade obsahuje okrem reťazcov a nepárnej dĺžky aj slová obsahujúce aspoň jedno písmeno b. Formálny zápis: L^c = {a²ⁱ+1: i ≥ 0} ∪ {a,b}*b{a,b}*.</string>
    <string name="zretazenie_vysvetlenie">Zreťazenie slov u a v je slovo u.v . Často bodku medzi zreťazenými slovami vynechávame a píšeme uv. Pre slová u=a₁a₂… a v=b₁b₂… zapisujeme ich zreťazenie:\n\nuv = a1a2…b1b2…\n\nZreťazenie nie je komutatívne. Pri zreťazení slov záleží na ich poradí. Zreťazením slova u s prázdnym slovom, zľava alebo sprava, sa slovo u nezmení, platí u . ε=  ε.u = u. Zreťazenie dvoch identických slov zapisujeme ako druhú mocninu tohto slova, uu=u² . Analogicky zreťazenie i identických slov zapisujeme ako uⁱ . Nultá mocnina ľubovoľného slova je rovná prázdnemu slovu, u^0=. Zreťazenie jazykov L₁ a L₂ nazývame jazyk L₁.L₂ definovaný takto: \n\nL₁.L₂ = { w₁w₂ : w₁∈L₁, w₂∈L₂}\n\nPoznámka: Všimnite si, že ľubovoľné slovo jedného jazyka zreťazíme s ľubovoľným slovom druhého jazyka. Špeciálne do zreťazenia L.L dvoch identických jazykov patria slová tvaru uv pre všetky možné kombinácie slov u a v z jazyka L, teda nie len slová uu. Špeciálne zreťazenie k identických jazykov zapisujeme ako k - tu mocninu jazyka, teda L^k . Pritom nultá mocnina ľubovoľného neprázdneho jazyka je jazyk obsahujúci len prázdne slovo. Platia teda rovnosti \n\nL⁰={ε}, L₁= L a L^k+1 = L.L^k , pre každé k≥0\n\nPoznámka: Ak je jazyk L₁ jazykom nad abecedou Σ₁ a jazyk L₂ jazykom nad abecedou Σ₂ potom je jazyk L₁. L₂ jazykom nad abecedou Σ₁ ∪ Σ₂.</string>
    <string name="priklad_zretazenie">1) Máme abecedu Σ₁={a, b} a Σ₂={a, c}. \nJazyk L₁. L₂ = {aa, ac, ba, bc} je jazyk nad abecedou: \nΣ = {a, b, c}.\n2) Máme jazyk L = {abc, bcc, aaac}. \nPotom zrkadlový obraz jazyka L bude jazyk: \nL^r = {cba, ccb, caaa}.</string>


    <string name="definicia_dka">Deterministickým konečným automatom (DKA) nazývame štruktúru určenú päticou A = (Q, Σ, δ, q₀, F), kde \n- Q je konečná neprázdna množina stavov konečného automatu, \n- Σ je konečná neprázdna množina vstupných symbolov, vstupná abeceda, \n- δ je zobrazenie δ: Q×Σ → Q, prechodová funkcia automatu, \n- q₀ ∈ Q je počiatočný stav automatu, \n- F ⊆ Q je množina koncových stavov automatu.</string>
    <string name="priklad_dka">Je daný deterministický konečný automat formálnou päticou: \nA = (Q, Σ, δ, q₀, F), \nQ= {q₀, q₁, q₂, q₃}, \nΣ={a,b,c}, \nδ: δ(q₀,a) = q₁, δ(q₀,b) = q₂, δ(q₀,c) = q₂, \nδ(q₁,a) = q₀, δ(q₁,b) = q₁, δ(q₁,c) = q₃, \nδ(q₂,a) = q₂, δ(q₂,b) = q₃, δ(q₂,c) = q₁, \nδ(q₃,a) = q₃, δ(q₃,b) = q₂, δ(q₃,c) = q₃, \nq₀= q₀, \nF= {q₂,q₃}. \n\nKonečný automat môžeme zapísať okrem pätice, ktorá je uvedená v definícii ešte ďalšími dvoma spôsobmi a to pomocou tabuľky prechodovej funkcie a hranovo orientovaným grafom.
</string>
    <string name="zapis_dka">Do prechodovej tabuľky zapisujeme hodnoty prechodovej funkcie δ, ktorá popisuje, akým spôsobom mení konečný automat stavy a tiež označujeme šípkami vstupný stav a výstupné stavy automatu.
</string>
    <string name="dka_vysvetlenie_obrazok">Do prvého riadku tabuľky sa píšu symboly abecedy z množiny vstupných symbolov Σ, pre automat z príkladu sú to symboly a,b,c, čiže Σ={a,b,c}. Do prvého stĺpca (z ľavej strany) píšeme stavy konečného automatu. Pre automat z príkladu sú to stavy q₀, q₁, q₂, q₃. V bunke tabuľky zodpovedajúcej riadku označenému stavom q a stĺpcu označenému písmenom a je stav p určený hodnotou (q,a), tj. p = (q,a). Počiatočný stav q₀ konečného automatu označujme šípkou smerujúcou k danému riadku tabuľky. Šípky v smere od tabuľky označujú koncové stavy konečného automatu, teda stavy z množiny F.</string>
    <string name="dka_graficke_znazornenie_text">Konečný automat môžeme reprezentovať aj pomocou orientovaného grafu. Vrcholy grafu označujú stavy automatu a znázorňujeme ich krúžkom označeným názvom stavu. Orientovaná hrana grafu vychádzajúca z vrcholu p a vstupujúca do vrcholu q označená šípkou a reprezentuje hodnotu q=δ(p, a) prechodovej funkcie δ pre stav p a signál a. Počiatočný stav konečného automatu je označený zvlnenou šípkou vstupujúcou do tohto stavu a každý z koncových stavov je označený dvojitým krúžkom.</string>
    <string name="dka_graf_text">V automate môžu nastať tieto typy prechodovej funkcie δ, ktoré sú zobrazené pomocou hranovo orientovaných grafov na obrázku: \n\n● Prechod typu N: \nδ(q₀, 0) = q₀ - automat prečíta symbol 0 - na tento signál zostáva stav nezmenený \n\n● Prechod typu Z: \nδ(q₀, 1) = q₁ - automat prečíta symbol 1 - na tento signál sa stav q₀ zmení na q₁</string>
    <string name="dka_konfiguracia_vysvetlenie">Na to, aby sme mohli formálne presne zaznamenať činnosť stroja použijeme pojem konfigurácia. Konfigurácia (akéhokoľvek) stroja bude obsahovať takú informáciu o aktuálnom stave výpočtu, ktorá je podstatná pre ďalší priebeh výpočtu skúmaného stroja. V prípade konečného automatu je to informácia o aktuálnom stave, v ktorom sa automat nachádza v danom okamihu a o neprečítanej časti vstupného slova. Formálne je konfigurácia konečného automatu popísaná dvojicou (q,w) ∈ Q×∑* , kde q je stav automatu, v ktorom sa nachádza a w je reťazec nespracovaných symbolov na vstupe automatu.</string>
    <string name="dka_pociatocna_konfiguracia_vysvetlenie">Pred začatím vlastnej práce je KA v tzv. počiatočnej konfigurácii (q₀,w). Táto konfigurácia je určená počiatočným stavom q₀ a reťazcom w, ktorý má automat spracovať, (q₀,w)∈{q₀}×∑*. Stroj úspešne ukončí činnosť po spracovaní celého vstupného slova v niektorej koncovej konfigurácii (q^f,), ktorá je určená jedným z koncových stavov automatu a prázdnym slovom, (q^f,) F×{ε}. </string>
    <string name="dka_pociatocna_konfiguracia_priklad">1) Majme konečný automat M popísaný stavmi Q = {q₀, q₁} a abecedou Σ = {0, 1}. Uveďte príklady konfigurácie automatu M. \n\nRiešenie: \nPríkladom konfigurácie automatu M sú dvojice (q₁, 1001) alebo (q₀, 0001). \n\n\n2) Napíšte počiatočnú a všetky koncové konfigurácie konečného automatu A, ktorého výpočet začína v stave q₀, na vstupe je slovo w a F = {q₀, q₃, q₅}. \n\nRiešenie: \nPočiatočná konfigurácia: (q₀, w). \nKoncové konfigurácie automatu sú: (q₀, ε), (q₃, ε) a (q₅, ε).
    </string>
    <string name="dka_pociatocna_konfiguracia_priklad_text">Výpočet automatu je zaznamenávaný postupnými zmenami jeho konfigurácií, ktoré prebiehajú na základe prechodovej funkcie δ konečného automatu. Výpočet pozostáva z jednotlivých krokov výpočtu. \nMajme konečný automat A = (Q, Σ, δ, q₀, F). Krok výpočtu automatu je relácia označovaná symbolom ├, ktorá určuje zmenu konfigurácie automatu na základe jeho prechodovej funkcie. Definujeme ho nasledovne: \n\nNech q,p ∈ Q, a ∈ Σ, w ∈ Σ*. Potom krok výpočtu zapíšeme (q,aw ├ (p,w), keď δ(q,a) = p. \n\nVýpočet KA je zmena konfigurácie uskutočnená niekoľkými krokmi výpočtu. Je to globálna zmena situácie v automate na základe lokálnej zmeny. \n\n(q,w) ├ ⁰ (q,w), \n(q,w) ├ ¹ (p,u) práve vtedy, keď (q,w) ├ (p,u), \n(q,w) ├ⁱ (p,u) práve vtedy, keď (q,w) ├ (r,v) a (r, v) ├ⁱ-¹ (p,u), \n(q,w) ├  (p,u) práve vtedy, keď (q,w) ├ⁱ (p,u) pre niektorú hodnotu i≥0.</string>
    <string name="jazyk_rozoznavany_automatom_ka_text">Jazyk L(A) rozpoznávaný konečným automatom A = (Q,q₀,∑,δ,F ) je množina slov, ktoré prevedú počiatočnú konfiguráciu KA do koncovej konfigurácie. \n\nL(A) = { w∈∑*:   (q₀,w) ├*  (q^f,) , q^f∈F }</string>
    <string name="priklad_ka_text1">Zostrojíme deterministický konečný automat, rozpoznávajúci jazyk {aa, b}*. \n\nRiešenie: \nAutomat M bude rozpoznávať reťazce, ktoré sú tvorené ľubovoľne dlhou postupnosťou zloženou z podreťazcov aa a b. Rozpoznávanie týchto reťazcov znázorňuje nasledujúci stavový graf:
</string>
    <string name="priklad_ka_text2">Pretože prechodová funkcia deterministického konečného automatu je definovaná ako úplná funkcia, je nutné doplniť nedefinované hodnoty prechodovej funkcie tak, aby sa rozpoznávaný jazyk nezmenil. Vyriešime to tým, že k vytvorenému stavovému grafu pridáme nový stav k („kôš“) a pravidlá prechodovej funkcie prechádzajúce do tohto stavu z každej dvojice (q, x )  Q × ∑, ktorej  nepriraďuje žiadny stav.
</string>
    <string name="priklad_ka_text3">Po týchto úpravách už automat M vyhovuje definícii deterministického konečného automatu. \nJeho kompletný zápis je M = (Q, Σ, δ, q₀, F) kde: \nQ={q₀, q₁, k}, \nΣ = {a, b}, \nδ(q₀, a) = q₁, δ(q₀, b) = q₀, \nδ(q₁, a) = q₀, δ(q₁, b) = k, \nδ(k, a) = k, δ(k, b) = k, \nq₀ = q₀, \nF={q₀}. \nSkrátene M = ({q₀, q₁, k}, {a, b},δ , q₀, { q₀}), kde δ je špecifikovaná na predchádzajúcich riadkoch. \n\nUkážky výpočtu: Preveríme, že automat M akceptuje slovo baabb z jazyka {aa, b}*. \nVýpočet automatu M so vstupom baabb prebieha nasledovne:\n\n(q₀,baabb)├ (q₀,aabb)├ (q₁,abb)├ (q₀,bb)├ (q₀,b)├ (q₀,ε)\n\nVýpočet automatu po spracovaní vstupného slova skončil konfiguráciou (q₀,ε), konečný automat sa nachádza v koncovom stave q₀ a teda slovo baabb automat akceptuje. \nPreveríme, že automat M neakceptuje slovo aabab, ktoré do jazyka {aa, b}* nepatrí. \n\n(q₀,aabab)├ (q₁,abab)├ (q₀,bab)├ (q₀,ab)├ (q₁,b)├ (k,ε)\n\nVýpočet automatu po spracovaní vstupného slova skončil konfiguráciou (k,ε), konečný automat sa nachádza v stave k, ktorý nie je koncový a teda slovo aabab automat neprijme.
</string>
    <string name="nka_text">Nedeterministickým konečným automatom (NKA) nazývame štruktúru určenú päticou A = (Q, Σ, δ, q₀, F), kde: \n- Q je konečná neprázdna množina stavov automatu, \n- Σ je konečná neprázdna množina vstupných symbolov, vstupná abeceda, \n- δ je zobrazenie δ: Q×Σ →P(Q), prechodová funkcia automatu, \n- q₀ ∈ Q je počiatočný stav automatu, \n- F ⊆ Q je množina koncových stavov automatu. </string>
    <string name="nka_priklad">Je daný nedeterministický konečný automat formálnou päticou: \nA = (Q, Σ, δ, q₀, F), \nQ= {q₀, q₁, q₂, q₃}, \nΣ={a,b,c}, \nδ: δ(q₀,a) = {q₁, q₂}, δ(q₀,b) = {q₂}, δ(q₀,c) = {q₂}, \nδ(q₁,a) = {q₀, q₁}, δ(q₁,b) = {q₁}, δ(q₁,c) = {q₃}, \nδ(q₂,a) = {q₂, q₃}, δ(q₂,b) = {q₃}, δ(q₂,c) = {q₁}, \nδ(q₃,a) = {q₃}, δ(q₃,b) = {q₂}, δ(q₃,c) = {q₃}, \nq₀= q₀, \nF= {q₂,q₃}. \n\nNakreslite graf prechodov.\n\nRiešenie:</string>
    <string name="nka_text2">Krok výpočtu nedeterministického konečného automatu je relácia ├, ktorá určuje zmenu konfigurácie automatu na základe jeho prechodovej funkcie takto: (q,aw)├ (p,w) práve vtedy, keď p ∈ δ(q,a). Poznámka: Všimnite si, že krok výpočtu je definovaný tak, že stav v nasledujúcej konfigurácii je jeden (ľubovoľný) zo stavov patriacich do δ(q,a). V nadväznosti na takto definovaný krok výpočtu je výpočet definovaný analogicky ako v prípade deterministického konečného automatu takto: \n(q,w) ├ ⁰ (q,w), \n(q,w) ├ ¹ (p,u) práve vtedy, keď (q,w) ├ (p,u), \n(q,w) ├ ⁱ (p,u) práve vtedy, keď (q,w) ├ (r,v) a (r, v) ├ⁱ-¹ (p,u), \n(q,w) ├  (p,u) práve vtedy, keď (q,w) ├ ⁱ (p,u) pre niektorú hodnotu i≥0. \n\nJazyk akceptovaný konečným automatom A = (Q, ∑, q₀, δ, F ) je množina slov: \n\nL(A) = { w ∈ ∑*: (q₀,w) ├*  (q^f,ε) , q^f∈F }
    </string>
    <string name="priklad_nka">Zostrojte nedeterministický konečný automat, ktorý prijíma jazyk nad dvojprvkovou abecedou {a,b}, obsahujúci slová s podslovami ab alebo bba. \n\nRiešenie:\nAlternatívne je možné jazyk zo zadania zapísať takto: \n\nL={a,b}*ab{a,b}*∪{a,b}*bba{a,b}*. \n\nNedeterministický konečný automat, ktorý ho akceptuje, je na obrázku. Nedeterminizmus v tomto príklade v stave q₀ pre symbol a aj symbol b umožňuje automatu ako nasledujúci stav vybrať jeden z dvoch rôznych predpísaných stavov: \n\nδ(q₀,a) = {q₀,q₃} a δ(q₀,b) = {q₀,q₁}. </string>
    <string name="priklad_nka_text">Preveríme napríklad, že automat z obrázku akceptuje slovo aaabb. Podľa definície stačí nájsť jeden akceptujúci výpočet spomedzi možných výpočtov z konfigurácie (q₀, aaabb). Je ním výpočet \n\n(q₀, aaabb)├ (q₀, aabb) ├ (q₀, abb) ├ (q₃, bb) ├ (q₄, b) ├ (q₄, ε). \n\nVšimnime si, že z danej počiatočnej konfigurácie existujú aj neakceptujúce výpočty. \nNapríklad: \n\n(q₀, aaabb)├ (q₀, aabb) ├ (q₀, abb) ├ (q₀, bb) ├ (q₁, b) \n\nTento výpočet skončil bez toho, aby automat spracoval celé vstupné slovo, δ(q₀,b)=∅. Iný príklad neúspešného výpočtu z rovnakej počiatočnej konfigurácie je: \n\n(q₀, aaabb)├ (q₀, aabb) ├ (q₀, abb) ├ (q₀, bb) ├ (q₀, b) ├ (q₀, ε).\n\nAutomat spracoval celé vstupné slovo, ale nie je v koncovom stave, konfigurácia (q₀, ε) nie je koncová. </string>


    <string name="za_vysvetlenie">● Od konečného automatu sa odlišuje tým, že má o jednu pásku viac – zásobník\n● Zásobníkový automat pracuje súčasne so symbolmi na zásobníku aj so symbolmi slova ω alebo jazyka L, ktoré sa nachádzajú na vstupnej páske\n● platia pravidlá determinizmu a nedeterminizmu ako pri konečných automatoch\n● Do zásobníka sa symboly vkladajú "zvrchu"\n● Platí "last in - first out", teda symbol, ktorý bol uložený do zásobníka ako posledný, bude vybratý ako prvý</string>
    <string name="za_definicia">● Q - konečná neprázdna množina stavov zásobníkového automatu\n● Σ - konečná neprázdna množina vstupných symbolov zásobníkového automatu\n● Γ - konečná neprázdna množina zásobníkových symbolov\n● δ - prechodová funkcia δ: Q x (Σ ∪ {ε}) x Γ → P(Q x Γ*)\n● q₀ - počiatočný stav, q₀ ∈ Q\n● Z - počiatočný symbol na zásobníku, Z ∈ Γ\n● F - množina koncových stavov F ⊆ Q
</string>
    <string name="za_konfiguracia">Trojica (q, ω, W) ∈ Q x Σ* x Γ*\n● q je aktuálny stav\n● ω zostávajúce slovo, ktoré ešte treba prečítať zo vstupnej pásky\n● W ∈ Γ* v konfigurácii reprezentuje aktuálny symbol na vrchu zásobníka\n\nAk ZA = ({q₀, q₁}, {b, c}, {Z₀, x}, δ, q₀, Z₀, ∅), potom konfigurácie zásobníkového automatu ZA sú napr. (q₀, bbcbb, xxxZ), (q₁, b, Z)
</string>
    <string name="za_rozpoznany">ZA = (O, Σ, Γ, δ, q₀, Z₀, ∅)\n\nSlovo je prijaté, ak automat spracoval slovo na vstupnej páske a má úplne prázdny zásobník. V tomto prípade je množina koncových stavov F "nepodstatná" a kladieme F = ∅.\n\n● F = ∅ je uvedené aj v sedmici definujúcej zásobníkový automat.\n\n● Jazyk prijímaný ZA:\n L(ZA) = {ω | ∃q ∈ Q; (q₀, ω, Z) |-ZA (q, ε, ε)}\n\n\nZA = (Q, Σ, Γ, δ, q₀, Z₀, F)\nSlovo je prijaté, ak automat spracoval slovo na vstupnej páske a ocitne sa v niektorom z koncových stavov\n\nL(ZA) = {ω | ∃qf ∈ F, s ∈ Γ*; (q₀, ω, Z) |-ZA (q, ε, s)}
</string>
    <string name="za_priklad">Zadanie:\n\nZostrojte zásobníkový automat, ktorý rozpoznáva jazyk L={aⁱbⁱ; i≥1} koncovými stavmi.\n\nRiešenie:\n\nČinnosť požadovaného zásobníkového automatu bude nasledovná: pokiaľ bude na vstupnej páske automat čítať symbol a, ostane jeho stav nezmenený, zotrvá v stave q₀ a za každý prečítaný symbol a uloží do zásobníka jeden symbol a. Týmto postupom dosiahneme, že počet symbolov a prečítaných na páske sa bude rovnať počtu symbolov a zapísaných do zásobníku. Pre prechodovú funkciu teda platí:\n\nδ(q₀,a,Z₀) = {(q₀,Z₀a)}         δ(q₀,a,a)= {(q₀,aa)}\n\nVšimnite si, že pridávanie symbolu na zásobníkovej páske je riešené spôsobom, že sa pôvodný symbol Z₀ nahradí reťazcom Z₀a. Pri prečítaní prvého symbolu b zmení zásobníkový automat stav na q₁ a zo zásobníka sa vymaže jeden symbol a,\n\nδ(q₀,b,a)= {(q₁,ε)}\n\nV stave q₁ zásobníkový automat zotrvá, pokým bude čítať symboly b, a zo zásobníka vždy odoberie symbol a,\n\nδ(q₁,b,a)= {(q₁,ε)}\n\nAk ostane v zásobníku iba symbol Z₀, prejde zásobníkový automat do koncového stavu, pretože práve prečítal reťazec v tvare aⁿbⁿ. \n\nVýsledný zásobníkový automat má tvar:\n\nZA = (Q, Σ, Γ, δ, q₀, Z₀, F), kde:\nQ={q₀,q₁,q₂},\nΣ={a,b},\nΓ={Z₀,a},\nF={q₂},\n\nPrechodová funkcia je v tvare:\n\nδ(q₀,a,Z₀) = {(q₀,Z₀a)}\nδ(q₀,a,a)= {(q₀,aa)}\nδ(q₀,b,a)= {(q₁,ε)}\nδ(q₁,b,a)= {(q₁,ε)}\nδ(q₁,ε,Z₀)= {(q₂,Z₀)}\n\nUkážka akceptujúceho výpočtu v prípade vstupného slova a³b³:\n\n(q₀,a³b³,Z₀) ├(q₀,a²b³,Z₀a) ├ (q₀,ab³,Z₀aa) ├ (q₀,b³,Z₀a³) ├ (q₁,b²,Z₀aa)├(q₁,b,Z₀a) ├ (q₁,ε,Z₀) ├ (q₂,ε,Z₀)\n\nPo spracovaní slova je zásobníkový automat v koncovom stave v akceptujúcej konfigurácii.</string>


    <string name="gramatika_definicia">Gramatikou nazývame štvoricu G=(N,T,P,S), kde:\nN je konečná množina neterminálov\nT je konečná množina terminálov (konečná abeceda), pričom N ∩ T = Ø\nS ∈ N je počiatočný (štartovací, iniciačný) symbol\nP je množina prepisovacích pravidiel, ktorá je konečnou podmnožinou množiny (N ∪ T)*N (N ∪ T)* x (N ∪ T)*\n\nPoznámky k definícii gramatiky\n\nK definícii gramatiky sú potrebné:\nneterminálne symboly = symboly, ktoré musia byť ďalej definované\nterminálne symboly = prvotné symboly jazyka\nprepisovacie pravidlá = gramatické pravidlá potrebné k tvorbe viet\nZápis (N ∪ T)*N (N ∪ T)* x (N ∪ T)* znamená požiadavku na aspoň jeden neterminál na ľavej strane pravidla počiatočný symbol = neterminál, z ktorého odvodzovanie začína.
    </string>
    <string name="priklad_gramatika">Gramatika G = ({A, S}, {a, b}, P, S), pričom:\nA, S - neterminály\na, b – terminály\nP – pravidlá\nP = {\n       S → aA,\n       A → aAb\n       A → ε = prázdne slovo}\nS - štartovací symbol\n\n● Opíšte jazyk generovaný touto gramatikou
</string>
    <string name="mnozina_pravidiel">P - množina prepisovacích pravidiel, ktorá je konečnou podmnožinou množiny\n\n(N ∪ T)*N (N ∪ T)* x (N ∪ T)*\n\n..N ... Znamená aspoň jeden neterminál na ľavej strane pravidla\nNapríklad:\nA → aAb, S → bS, S → b, aA → aAb\na → aA  nemôže!!!
</string>
    <string name="konvencie_zapisu">Neterminály označujeme veľkými latinskými písmenami:\nA, B, S, T,...\n\nTerminály označujeme malými latinskými písmenami:\na, b, c ...\n\nSlová zložené z neterminálov a terminálov označujeme malými gréckymi písmenami:\nα,β...\nα = aAb, α = aS, β = aaa,\n\nPrepisovacie pravidla s rovnakou ľavou stranou, t.j.\nα→β₁, α→β₂, …, α→β^k\nzapíšeme ako   α → β₁| β₂| … | β^k
</string>
    <string name="pouzitie_gramatiky">Základom generovania viet jazyka sú prepisovacie pravidlá.\n\nNech G=(N, T, P, S) gramatika. Potom nad množinou (N ∪ T)* definujeme reláciu derivácie ⇒G takto:\n\nAk αβχ ∈(N ∪ T)* a αδχ ∈(N ∪ T)*, potom dané reťazce sú v relácii: \n⇒G, tj. αβχ ⇒G αδχ, pokiaľ v P existuje pravidlo β→δ.\n\nAk α,β ∈(N ∪ T)* a platí  α⇒Gβ, potom hovoríme, že reťazec β je možné v jednom kroku odvodiť (derivovať) z reťazca α (priamo odvodiť).
    </string>
    <string name="gramatika_priklady">Príklad obvodenia slova:\n\nGramatika G = ({A,S}, {a,b},P,S), pričom:\npravidlá P = {\n                     S → aA,\n                     A → aAb\n                     A → ε}\n\nOdvodenie slova:\nS⇒aA⇒aaAb⇒aaaAbb⇒aaabb\n\n\n\nPríklad gramatiky a jazykov:\n\nAký jazyk generuje táto gramatika?\n\nG=({S}, {0,1}, P, S)\nP = {S → 0S | 1S | 0 | 1 }\n\n\nGramatika generuje jazyk:\nL(G) = {0,1}⁺
    </string>
    <string name="jednoznacnost_gramatiky_text">Deriváciu α₀,α₁,α₂, kde každú priamu deriváciu αi⇒αi+1 pre 0≤i\u003Ck  realizujeme tak, že vo vetnej forme αi nahradzujeme prvý neterminál zľava (sprava), nazývame ľavá (pravá) derivácia.
</string>
    <string name="priklad_jednoznacnost_gramatiky">G=({A,S},{0,1},P,S)\nP={S → AB; A → 0AB |0; B → 1}\n\nĽavá derivácia:\nS → AB → 0ABB → 00BB → 001B → 0011\n\nPravá derivácia:\nS → AB → A1 → 0AB1 → 0A11 → 0011
    </string>
</resources>